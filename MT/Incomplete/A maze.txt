//30 pts
//runtime error
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
int output = 0;
struct coord{
  int x;
  int y;
};
void fill(vector<vector<int>> input, int x, int y, int endx, int endy){
    if (x == endy && y == endx){
    //   for (int x = 0; x < input.size(); x++){
    //     for (int y = 0; y < input[0].size(); y++){
    //     cout << input[x][y] << " ";
    //   }
    //   cout << "\n";
    // }
    // cout << "\n\n";
    output++;
    return;
    }
    if (x == -1 || x == input.size()){
        return;
    }
    if (y == -1 || y == input[0].size()){
        return;
    }
    if (input[x][y] == 0){
        return;
    }
    input[x][y] = 0;
    fill(input, x + 1, y, endx, endy);
    fill(input, x - 1, y, endx, endy);
    fill(input, x, y + 1, endx, endy);
    fill(input, x,y - 1, endx, endy);
    return;
}
int main() {
  int row, colm, bn;
  coord start, end;
  cin >> row >> colm >> bn;
  cin >> start.x >> start.y >> end.x >> end.y;
  start.x--;
  start.y--;
  end.x--;
  end.y--;
  coord barriers[bn];
  for (int x = 0; x < bn ; x++){
    cin >> barriers[x].x;
    cin >> barriers[x].y;
    barriers[x].x--;
    barriers[x].y--;
  }
  vector<int> temp;
  vector <vector<int>> board;
  for (int x = 0; x < colm; x++){
    for (int y = 0; y < row; y++){
      temp.push_back(1);
    }
    board.push_back(temp);
    temp.clear();
  }
  for (int x = 0; x < bn; x++){
    board[barriers[x].x][barriers[x].y] = 0;//0 = barrier
  }
  cout << "\n\n";
 
  fill(board, start.x, start.y, end.x, end.y);
  cout << output;
  
  // input = fill (input, 0,0);
  // for (int x = 0; x < input.size(); x++){
  //   for (int y = 0; y < input[0].size(); y++){
  //     cout << input[x][y] << " ";
  //   }
  //   cout << "\n";
  // }
  
}
/*
5 5
1 1 1 0 1
1 1 0 1 1
1 0 1 1 1
0 0 0 0 0
1 1 1 1 1
*/